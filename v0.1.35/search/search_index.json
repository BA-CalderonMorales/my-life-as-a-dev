{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi, I'm Brandon A. Calderon Morales \ud83d\udc4b","text":"<p>Product-Minded Software Engineer Omaha, Nebraska, United States</p> <p>Follow on LinkedIn</p> <p>\ud83d\udee0\ufe0f\ud83d\ude80 I build resilient code with strategic vision.</p> SummaryProfessionalTechnical SkillsExperienceEducationConnectAI <p>Are you an AI enthusiast like me? I've been having a blast exploring how AI can be integrated into documentation and in creating interactive tools. </p> <p>To learn more about my journey and what the AI Playground offers, you can start with the AI Introduction page. It sets the stage for the tools and experiments I've been working on.</p> <p>If you're eager to jump right in and experience it firsthand, head directly to the AI Playground! This is where the magic happens, and you can find tools like:</p> <p>\ud83d\udd39 Repository Explorer: Get AI-driven insights into code repositories. \ud83d\udd39 Interactive Scene Creator: Describe and generate 3D scenes with AI assistance. \ud83d\udd39 Code Assistance: Leverage AI to explain, document, or help refactor your code.  </p> <p>Experimenting with AI &amp; Test Scenes</p> <p>You'll also find some of my visual experiments and test scenes (often generated with AI assistance) in the Test Scenes section of my blog. It's a fun way I explore prompting and share visual concepts.</p>"},{"location":"#summary","title":"Summary","text":"<p>\ud83d\udee0\ufe0f\u26a1 Mission-Driven Engineering | Resilience &amp; Scale | Empower &amp; Democratize</p> <p>I enjoy the challenge of learning new technologies, adapting to all scenarios, and championing efficiency within development teams. I'm also a father of two beautiful girls and a husband to a wonderful wife. Keep scrolling through this page to learn about me and use the left-hand side links to jump to other important/key sections about me. Cheers!</p>"},{"location":"#top-skills","title":"Top Skills","text":"<p>\ud83d\udd39 DevOps Transformation \ud83d\udd39 CI/CD Pipeline Optimization \ud83d\udd39 Legacy Code Modernization \ud83d\udd39 Technical Mentorship \ud83d\udd39 Process Standardization  </p>"},{"location":"#professional-background","title":"Professional Background","text":""},{"location":"#team-leadership","title":"Team Leadership","text":"<p>\ud83d\udd39 Leading DevOps transformations \ud83d\udd39 Mentoring junior engineers \ud83d\udd39 Cross-functional collaboration \ud83d\udd39 Military leadership principles \ud83d\udd39 Agile workflow optimization  </p>"},{"location":"#technical-expertise","title":"Technical Expertise","text":"<p>\ud83d\udd39 CI/CD pipeline design \ud83d\udd39 System architecture \ud83d\udd39 Legacy code modernization \ud83d\udd39 Distributed systems \ud83d\udd39 Development automation  </p>"},{"location":"#communication","title":"Communication","text":"<p>\ud83d\udd39 Technical documentation \ud83d\udd39 Process standardization \ud83d\udd39 Stakeholder engagement \ud83d\udd39 Knowledge transfer \ud83d\udd39 Teaching/training delivery  </p>"},{"location":"#languages","title":"Languages","text":"<p>\ud83d\udd39 English (Native) \ud83d\udd39 Spanish (Conversational)  </p>"},{"location":"#certifications","title":"Certifications","text":"<p>\ud83d\udd39 Full-Stack Web Development Certificate  </p>"},{"location":"#career-timeline","title":"Career Timeline","text":"<pre><code>gantt\n    dateFormat  YYYY-MM-DD\n    title Career Timeline\n    section Software Engineering\n    Software Engineer, Sr. Professional (Fiserv) :active, f1, 2024-01-01, 1y4m\n    Software Engineer (Leidos)                      :active, f2, 2021-10-01, 1y8m\n    Web Services Developer (Insight Global)         :active, f3, 2023-05-01, 7m\n    section Military &amp; Legal\n    Military Trainee, Sr. Professional (Fiserv)       :active, m1, 2023-11-01, 3m\n    Legal Chief (US Marine Corps)                     :active, m2, 2018-06-01, 11m\n    Court Reporter (US Marine Corps)                  :active, m3, 2016-08-01, 1y10m\n    Legal Specialist (US Marine Corps)                :active, m4, 2014-12-01, 1y9m\n    Legal Administrative Assistant (Boys Town)        :active, m5, 2019-06-01, 3m</code></pre>"},{"location":"#technical-skills","title":"Technical Skills","text":""},{"location":"#technical-focus","title":"Technical Focus","text":"<pre><code>flowchart TD\n    A[Software Engineering] --&gt; B[CI/CD Optimization]\n    A --&gt; C[Distributed Systems]\n    B --&gt; D[Git &amp; GitHub]\n    B --&gt; E[Jenkins / GitHub Actions]\n    C --&gt; F[Scalable Architecture]\n    C --&gt; G[Workflow Automation]</code></pre>"},{"location":"#languages_1","title":"Languages","text":"<p>\ud83d\udd39 C# \ud83d\udd39 SQL \ud83d\udd39 JavaScript \ud83d\udd39 TypeScript \ud83d\udd39 XML \ud83d\udd39 YAML \ud83d\udd39 Groovy \ud83d\udd39 Rust  </p>"},{"location":"#frameworks","title":"Frameworks","text":"<p>\ud83d\udd39 React \ud83d\udd39 .NET 4.8 \ud83d\udd39 .NET 6+  </p>"},{"location":"#tools","title":"Tools","text":"<p>\ud83d\udd39 Visual Studio \ud83d\udd39 VS Code \ud83d\udd39 MSSQL \ud83d\udd39 CyberArk \ud83d\udd39 Splunk \ud83d\udd39 Confluence \ud83d\udd39 SharePoint \ud83d\udd39 ServiceNow \ud83d\udd39 Fortify SCA \ud83d\udd39 Jenkins \ud83d\udd39 GitHub Actions  </p>"},{"location":"#experience-highlights","title":"Experience Highlights","text":""},{"location":"#fiserv","title":"Fiserv","text":"<p>\ud83d\udd39 Role: Software Engineer, Sr. Professional \ud83d\udd39 Duration: January 2024 - Present (1 year 4 months) \ud83d\udd39 Location: Omaha, Nebraska, United States \ud83d\udd39 Highlights:     - Spearheaded migration from Jenkins to GitHub Actions to optimize CI/CD workflows.     - Resolved critical CI/CD issues and standardized workflows to boost team efficiency.     - Mentored junior engineers and contributed to high-level design and user story creation.  </p> <p>\ud83d\udd39 Previous Role: Military Trainee, Sr. Professional \ud83d\udd39 Duration: November 2023 - January 2024 (3 months) \ud83d\udd39 Gained insights into project management and business analysis as part of a specialized training program. \ud83d\udd39 Enhanced soft skills including communication, teamwork, and leadership.  </p>"},{"location":"#insight-global","title":"Insight Global","text":"<p>\ud83d\udd39 Role: Web Services Developer \ud83d\udd39 Duration: May 2023 - November 2023 (7 months) \ud83d\udd39 Location: Bellevue, Nebraska, United States \ud83d\udd39 Highlights:     - Developed and maintained web services using C#, SQL, and JavaScript.     - Managed design, implementation, refactoring, and bug fixes within a legacy codebase.  </p>"},{"location":"#leidos","title":"Leidos","text":"<p>\ud83d\udd39 Role: Software Engineer \ud83d\udd39 Duration: October 2021 - May 2023 (1 year 8 months) \ud83d\udd39 Location: Omaha, Nebraska, United States \ud83d\udd39 Highlights:     - Worked as both a Frontend and DevOps engineer.     - Configured development environments using Linux, VS Code, and Vim.     - Built and maintained shared React components and contributed to agile workflows.  </p>"},{"location":"#military-service","title":"Military Service","text":""},{"location":"#united-states-marine-corps","title":"United States Marine Corps","text":"<p>\ud83d\udd39 Legal Chief: June 2018 - April 2019 (11 months) \u2013 Mor\u00f3n De La Frontera, Andalusia, Spain \ud83d\udd39 Court Reporter: August 2016 - May 2018 (1 year 10 months) \u2013 Camp Lejeune, North Carolina \ud83d\udd39 Legal Specialist: December 2014 - August 2016 (1 year 9 months) \u2013 Camp Lejeune, North Carolina  </p>"},{"location":"#boys-town-national-research-hospital","title":"Boys Town National Research Hospital","text":"<p>\ud83d\udd39 Role: Legal Administrative Assistant \ud83d\udd39 Duration: June 2019 - August 2019 (3 months) \ud83d\udd39 Location: Boys Town, Nebraska  </p>"},{"location":"#education","title":"Education","text":""},{"location":"#university","title":"University","text":"<p>\ud83d\udd39 University of Nebraska at Omaha   Bachelor's Degree in Multidisciplinary Studies (Computer Science Concentration) August 2013 - December 2025 </p>"},{"location":"#certificates","title":"Certificates","text":"<p>\ud83d\udd39 devCodeCamp   Certificate, Full-Stack Software Development May 2021 - August 2021 </p>"},{"location":"#early-education","title":"Early Education","text":"<p>\ud83d\udd39 Omaha South Magnet High School   High School Diploma 2009 - 2013 </p>"},{"location":"#connect-with-me","title":"Connect with Me","text":""},{"location":"#professional","title":"Professional","text":"<p>\ud83d\udd39 LinkedIn \ud83d\udd39 email me </p>"},{"location":"#social","title":"Social","text":"<p>\ud83d\udd39 Substack \ud83d\udd39 Blue Sky \ud83d\udd39 YouTube \ud83d\udd39 Twitter </p>"},{"location":"#technical","title":"Technical","text":"<p>\ud83d\udd39 GitHub \ud83d\udd39 dockerhub:dev-environment </p>"},{"location":"#old-school-portfolio-site","title":"Old school portfolio site","text":"<p>\ud83d\udd39 portfolio.dev </p>"},{"location":"docs-as-code/","title":"Docs-as-Code Platform","text":"<p>This documentation site is built following the Docs-as-Code philosophy, treating documentation with the same care and processes as software code.</p>"},{"location":"docs-as-code/#what-is-docs-as-code","title":"What is Docs-as-Code?","text":"<p>Docs-as-Code is an approach to documentation that applies software development principles and tools to the process of creating and maintaining documentation:</p> <ul> <li>Version Control: Documentation is stored in Git repositories</li> <li>CI/CD: Automated build and deployment pipelines</li> <li>Code Review: Pull requests and reviews for documentation changes</li> <li>Issue Tracking: Using GitHub Issues for documentation improvements</li> <li>Markdown: Writing docs in plain text formats optimized for readability</li> </ul>"},{"location":"docs-as-code/#our-platform-features","title":"Our Platform Features","text":""},{"location":"docs-as-code/#core-technologies","title":"\ud83d\ude80 Core Technologies","text":"<p>This site leverages several powerful technologies:</p> <ul> <li>MkDocs: A fast, simple static site generator</li> <li>Material for MkDocs: A beautiful, feature-rich theme</li> <li>Mike: Version management for MkDocs</li> <li>GitHub Actions: CI/CD automation</li> <li>GitHub Pages: Hosting platform</li> </ul>"},{"location":"docs-as-code/#custom-plugins-integrations","title":"\ud83d\udd0c Custom Plugins &amp; Integrations","text":"<p>We've extended the standard MkDocs capabilities with:</p> <ul> <li>OpenAI Integration: AI-assisted content generation</li> <li>Version Management: Multiple documentation versions via mike</li> <li>Custom CLI Tools: Rust-based utilities for documentation management</li> </ul>"},{"location":"docs-as-code/#ai-integration","title":"\ud83e\udd16 AI Integration","text":"<p>Our AI integration plugin provides:</p> <ol> <li>Content Generation: Create summaries, examples, and explanations</li> <li>Code Samples: Generate relevant code snippets based on natural language descriptions</li> <li>Documentation Enhancement: Improve existing content with AI suggestions</li> </ol> <p>See the AI Demo for a live demonstration.</p>"},{"location":"docs-as-code/#implementation-architecture","title":"Implementation Architecture","text":"<pre><code>graph TD\n    A[Content Writing] --&gt;|Markdown| B[Git Repository]\n    B --&gt;|Push| C[GitHub Actions]\n    C --&gt;|Build| D[MkDocs + Plugins]\n    D --&gt;|Generate| E[Static Site]\n    E --&gt;|Deploy| F[GitHub Pages]\n    G[OpenAI API] &lt;--&gt;|Content Generation| D\n    H[User Input] --&gt;|Browser| I[UI Components]\n    I --&gt;|Requests| G</code></pre>"},{"location":"docs-as-code/#best-practices","title":"Best Practices","text":"<p>When working with this docs-as-code platform:</p> <ol> <li>Make small, focused changes to documentation</li> <li>Test locally before submitting pull requests (<code>mkdocs serve</code>)</li> <li>Use meaningful commit messages that explain the purpose of changes</li> <li>Include examples in your documentation</li> <li>Link related content to create a connected knowledge base</li> <li>Consider versioning for significant documentation updates</li> </ol>"},{"location":"docs-as-code/#future-enhancements","title":"Future Enhancements","text":"<p>We plan to extend this platform with:</p> <ul> <li>Interactive API Documentation: Live API testing capabilities</li> <li>User Feedback System: Collect and track user suggestions</li> <li>Extended AI Capabilities: More advanced content generation and analysis</li> <li>Localization Support: Multilingual documentation</li> </ul>"},{"location":"ai-demo/","title":"AI Demo","text":""},{"location":"ai-demo/#ai-capabilities-evolved-introducing-the-ai-playground","title":"AI Capabilities Evolved: Introducing the AI Playground!","text":"<p>This page previously demonstrated basic AI-powered content generation features. We've since launched a comprehensive AI Playground where you can explore these capabilities and much more in an interactive environment!</p>"},{"location":"ai-demo/#welcome-to-the-ai-playground","title":"Welcome to the AI Playground","text":"<p>The new AI Playground is your central hub for:</p> <ul> <li>Repository Exploration: Get AI-driven insights into code repositories.</li> <li>Interactive Scene Creation: Describe and generate 3D scenes with AI assistance.</li> <li>Code Assistance: Leverage AI to explain, document, or help refactor your code.</li> </ul>      Go to the AI Playground"},{"location":"ai-demo/#what-happened-to-the-old-demos","title":"What Happened to the Old Demos?","text":"<p>The functionalities previously showcased here (like AI-generated summaries and code examples via placeholders) have been integrated and significantly enhanced within the new AI Playground. This allows for a more dynamic and user-friendly experience.</p>"},{"location":"ai-demo/#api-key-handling","title":"API Key Handling","text":"<p>Previously, this page included instructions for setting up your OpenAI API key. In the new AI Playground, API key management is designed to be handled securely on the server-side. You will not need to configure client-side API keys to use the playground on this site.</p>"},{"location":"ai-demo/#how-it-works-now","title":"How It Works (Now)","text":"<p>The AI Playground is built using:</p> <ol> <li>A custom MkDocs plugin (<code>ai_plugin.py</code>) and a dedicated web component (<code>&lt;ai-playground&gt;</code>).</li> <li>Backend services (which you would implement) to securely call OpenAI's API.</li> <li>Interactive HTML templates and JavaScript for a dynamic user experience.</li> </ol> <p>We encourage you to explore the AI Playground to see these features in action!</p>"},{"location":"ai-demo/ai-playground/","title":"AI Playground","text":"<p>Welcome to the AI Playground, where you can leverage AI to explore repositories, create interactive 3D scenes, and get assistance with your code. Select a mode to get started!</p> <p>OpenAI API Key</p> <p>Ensure your OpenAI API key is securely handled server-side (e.g., via environment variables). This playground does not handle API keys on the client side.</p> <p></p>"},{"location":"ai-demo/ai-playground/#features","title":"Features","text":"<ul> <li>Repository Explorer: Get AI-powered insights about your GitHub repositories. Analyze code structure, assess documentation quality, receive feature recommendations, and more.</li> <li>Scene Creator: Generate and preview Three.js 3D scenes using natural language prompts. Edit the generated code and see live updates.</li> <li>Code Assistant: Get help understanding, documenting, and improving your code. Ask the AI to explain code snippets, generate documentation, suggest refactorings, or identify potential bugs.</li> </ul>"},{"location":"ai-demo/ai-playground/#how-to-use","title":"How to Use","text":"<ol> <li>Select a Mode: Use the tabs at the top of the AI Playground (Repository Explorer, Scene Creator, Code Assistant) to choose your desired tool.</li> <li>Follow Instructions: Each mode has specific inputs and controls. <ul> <li>For Repository Explorer, select a repository and the types of insights you want.</li> <li>For Scene Creator, describe the scene you envision and optionally use example prompts.</li> <li>For Code Assistant, paste your code and select the task for the AI.</li> </ul> </li> <li>Interact: Click the relevant buttons (e.g., \"Analyze Repository\", \"Generate Scene\", \"Process Code\") to send your request to the AI.</li> <li>View Results: The AI's response will be displayed in the designated results area for each mode.</li> </ol> <p>Note: AI generation may take a few moments depending on the complexity of the request and API response times. </p>"},{"location":"ai-demo/ai-playground/#technical-details","title":"Technical Details","text":"<p>This playground utilizes a custom web component (<code>&lt;ai-playground&gt;</code>) that dynamically loads content and interacts with backend API endpoints (not yet implemented in this example) for AI processing. The component manages different states for each mode (Repository Explorer, Scene Creator, Code Assistant) and fetches HTML templates for their UIs.</p> <ul> <li>Styling: Component-specific styles are located in <code>docs/assets/css/components/aiPlayground/aiPlayground.css</code>.</li> <li>JavaScript Logic: The core logic for the component is in <code>docs/assets/js/components/aiPlayground/aiPlayground.js</code>.</li> <li>HTML Templates: UI templates for each mode are in <code>docs/assets/templates/</code> (<code>repo-explorer.html</code>, <code>scene-creator.html</code>, <code>code-assistant.html</code>).</li> </ul>"},{"location":"ai-demo/ai-playground/#security-note","title":"Security Note:","text":"<p>Your OpenAI API key should be configured on a backend server that proxies requests to the OpenAI API. Never expose your API key directly in client-side code. The <code>open_ai_page_profile.json</code> outlines this with <code>\"clientSideKeyHandling\": false</code> and <code>\"useProxyEndpoint\": true</code>.</p>"},{"location":"ai-demo/ai-playground/playground/","title":"Playground","text":"<p>\u23f3 PLACEHOLDER: Upcoming Functionality</p> <p>This feature is currently in development and will be implemented in a future release. The current implementation may be incomplete or non-functional.</p> <p>Tags: <code>placeholder</code>, <code>future-feature</code></p>"},{"location":"blog/","title":"Blog Collection","text":"<p>Welcome to my blog space, where I share my thoughts and curate valuable resources from around the web.</p>"},{"location":"blog/#blog-categories","title":"Blog Categories","text":"My PostsCodingFamilyHealthLifeResources"},{"location":"blog/#coming-soon","title":"Coming Soon","text":"<p>Content coming soon</p>"},{"location":"blog/#programming-and-software-development","title":"Programming and Software Development","text":"<p>Content coming soon</p>"},{"location":"blog/#family-life-and-parenting","title":"Family Life and Parenting","text":"<p>Content coming soon</p>"},{"location":"blog/#physical-and-mental-wellbeing","title":"Physical and Mental Wellbeing","text":"<p>Content coming soon</p>"},{"location":"blog/#general-life-experiences-and-philosophy","title":"General Life Experiences and Philosophy","text":"<p>Random things I think about I'll add here</p>"},{"location":"blog/#curated-content-from-around-the-web","title":"Curated Content From Around The Web","text":"<p>Find a complete list of valuable resources and articles I've collected here</p>"},{"location":"blog/life/","title":"Blog - Life","text":"Test AI Scenes <p>Info</p> <p>Experimenting with some generative AI scene making via various LLMs.</p> <p>Nothing super serious, just some fun to pass the time. These are files that were: 1) Originally self-contained HTML files with HTML/CSS/JS in a single file; 2) Converted to use the pattern laid out in HTML to MkDocs Pattern Example I made. Going to add more as I see how cool they are.</p> <ul> <li>Stars and Motion</li> <li>Dream Scape</li> <li>Interactive Canvas Dreamscape</li> <li>Ghibli Forest Spirits</li> <li>Cellular Prism</li> <li>Colorful Particle Interaction</li> <li>Interactive Physics Playground</li> <li>Kaleidoscopic</li> <li>Intergalactic</li> </ul>"},{"location":"blog/life/test_scenes/alpha/","title":"Stars and Motion","text":""},{"location":"blog/life/test_scenes/bravo/","title":"Dream Scape","text":""},{"location":"blog/life/test_scenes/charlie/","title":"Interactive Canvas Dreamscape","text":""},{"location":"blog/life/test_scenes/delta/","title":"Ghibli Forest Spirits","text":""},{"location":"blog/life/test_scenes/echo/","title":"Cellular Prism","text":""},{"location":"blog/life/test_scenes/foxtrot/","title":"Colorful Particle Interaction","text":""},{"location":"blog/life/test_scenes/golf/","title":"Interactive Physics Playground","text":""},{"location":"blog/life/test_scenes/hotel/","title":"Kaleidoscopic","text":""},{"location":"blog/life/test_scenes/india/","title":"Intergalactic","text":""},{"location":"blog/resources/","title":"Resources","text":""},{"location":"blog/resources/#disclaimer-these-are-not-mine-if-any-are-broken-send-me-a-dm-or-raise-a-pr","title":"Disclaimer: These are not mine. If any are broken, send me a DM or raise a PR.","text":""},{"location":"blog/resources/#tech-articles-by-source","title":"Tech Articles by Source","text":"Microsoft SWE.NET DevelopmentInterview &amp; System Design ResourcesDevOps BlogsCompany Tech Blogs <p>Resources from Sr. SWE at Microsoft</p> <p> \ud83d\udd0d Show all Microsoft SWE resources <pre><code>\ud83d\udd39 [TDD: How to do it properly and why it's easy](https://www.linkedin.com/pulse/tdd-how-do-properly-why-its-easy-fiodar-sazanavets--sd5cc?utm_source=share&amp;utm_medium=member_ios&amp;utm_campaign=share_via)\n</code></pre> <p>Resources from Sr. SWE at Borealis</p> <p> \ud83d\udcbb Show all .NET Development resources <pre><code>\ud83d\udd39 [Where I host .NET apps in 2025 (top 5 picks)](https://lnkd.in/dHjvd2vV)  \n\ud83d\udd39 [Throwing exceptions kills apps. Here's how to fix that.](https://lnkd.in/dzdXXFnX)  \n\ud83d\udd39 [2025 .NET Development roadmap [Minimalist Edition]](https://lnkd.in/dvt8Baaa)  \n\ud83d\udd39 [10 fatal mistakes .NET developers make](https://lnkd.in/d2ebfrVk)  \n\ud83d\udd39 [Zero Azure cloud experience? Start here](https://lnkd.in/d7483w3u)  \n\ud83d\udd39 [Choose your poison: EF Core or Repository Pattern?](https://lnkd.in/djb7KyDd)  \n\ud83d\udd39 [7 powerful LINQ methods you'll wish you knew sooner](https://lnkd.in/dXKw278h)\n</code></pre> <p>Resources from Arpit Adlakha</p> <p> \ud83e\udde0 Show all Interview &amp; System Design resources <pre><code>\ud83d\udd39 [Tech Interview Handbook by Yangshun Tay (109k stars)](https://lnkd.in/g79Qnp-8)  \n\ud83d\udd39 [System Design Primer by Donne Martin (252k stars)](https://lnkd.in/g89Mtjea)  \n\ud83d\udd39 [System Design 101 by Alex Xu (56k stars)](https://lnkd.in/gPmCmvVg)  \n\ud83d\udd39 [Top System Design Resources by Gaurav Sen (14k stars)](https://lnkd.in/dbjymD_2)  \n\ud83d\udd39 [Best Company and Personal Engineering Blogs by kilimchoi (29k stars)](https://lnkd.in/gxDzj57b)  \n\ud83d\udd39 [The best developer Roadmaps by Kamran Ahmed (274k stars)](https://lnkd.in/gwaxJtr9)  \n\ud83d\udd39 [Computer Science Papers for System Design by Arpit Adlakha](https://lnkd.in/gkxJ8QAM)  \n\ud83d\udd39 [All Resources for Coding, LLD and HLD interviews by Arpit Adlakha (1.2k stars)](https://lnkd.in/g8W4NrP5)  \n\ud83d\udd39 [Coding Interview University (252k stars)](https://lnkd.in/gydeNvaV)  \n\ud83d\udd39 [System Design Questions/Solutions Collection by Ashish Pratap Singh (10k stars)](https://lnkd.in/g6hT4iVi)  \n\ud83d\udd39 [What Happens when you type google.com in browser (Most Indepth Answer)](https://lnkd.in/gbWkADQ6)  \n\ud83d\udd39 [30 seconds of Code (119k stars)](https://lnkd.in/g2MeSvmT)  \n\ud83d\udd39 [System Design Chapter Wise Explained (28k stars)](https://lnkd.in/gtYDU8UD)\n</code></pre> <p>Resources from DevOps Engineer at DevOps Job Search \u2013 Co-Founder</p> <p> \u2699\ufe0f Show the full list of DevOps resources <pre><code>\ud83d\udd39 [Terraform Project Structure](https://t.co/lKJm0ju673)  \n\ud83d\udd39 [Terraform State](https://t.co/xP0GcHByBm)  \n\ud83d\udd39 [Terraform Graphs](https://t.co/K7VBKkOEM5)  \n\ud83d\udd39 [Terraform Dynamic Blocks](https://t.co/IajNnL61Bo)  \n\ud83d\udd39 [Crossplane with ArgoCD](https://t.co/lfkQkJQPAT)  \n\ud83d\udd39 [GitOps Push vs. Pull Architecture](https://t.co/fJiZTDaURC)  \n\ud83d\udd39 [Multi Cloud GitOps Workflow](https://t.co/HiJKQmLtmL)  \n\ud83d\udd39 [Kyverno with ArgoCD](https://t.co/kMzDdwrdJE)  \n\ud83d\udd39 [Dockerfile vs. Docker Compose](https://t.co/0rClQbzwzn)  \n\ud83d\udd39 [Docker Image](https://t.co/jrZU5vwUxt)  \n\ud83d\udd39 [Docker Cache](https://t.co/jyKGJ0Wvk7)  \n\ud83d\udd39 [Docker Stats](https://t.co/TdolscGqEF)  \n\ud83d\udd39 [Docker Scout](https://t.co/TQLV7Nujxt)  \n\ud83d\udd39 [GitHub Actions Workflow](https://t.co/ffdIXmjmFY)  \n\ud83d\udd39 [GitHub Actions Optimization](https://t.co/PNAwSg1vgg)  \n\ud83d\udd39 [GitHub Branching Strategy](https://t.co/eeIQBayTg8)  \n\ud83d\udd39 [Ansible Architecture](https://t.co/aVkOWQhD5w)  \n\ud83d\udd39 [Ansible Roles](https://t.co/5mqAgAluFW)  \n\ud83d\udd39 [Ansible Dynamic Inventory](https://t.co/NJPK0vJO1p)  \n\ud83d\udd39 [Kubernetes Architecture](https://t.co/GQpHJILbKg)  \n\ud83d\udd39 [Pod Lifecycle](https://t.co/dNBFn3whNE)  \n\ud83d\udd39 [pod.yaml Breakdown](https://t.co/sLWQhRWvFc)  \n\ud83d\udd39 [VPC Network Segmentation](https://t.co/TkyiwDbpLd)  \n\ud83d\udd39 [Lambda Integrations](https://t.co/PRDh5q4Amn)  \n\ud83d\udd39 [Serverless Architecture](https://t.co/pCX9893OIR)\n</code></pre> <p>Resources from Sr. Staff SWE at UPS</p> <p> \ud83c\udfe2 Show all Company Tech resources <pre><code>\ud83d\udd39 [Uber Engineering Article](https://lnkd.in/gvga-NEg)  \n\ud83d\udd39 [Figma Engineering Article](https://lnkd.in/gFbvV8Mk)  \n\ud83d\udd39 [Canva Engineering Article](https://lnkd.in/gRHZtDCa)  \n\ud83d\udd39 [Netflix Tech Article](https://lnkd.in/gq-SWapT)  \n\ud83d\udd39 [Slack Engineering Article](https://slack.engineering/)  \n\ud83d\udd39 [LinkedIn Engineering Article](https://lnkd.in/g5eMavet)  \n\ud83d\udd39 [Dropbox Tech Article](https://dropbox.tech/)  \n\ud83d\udd39 [GitHub Engineering Article](https://lnkd.in/gKNBpb7V)  \n\ud83d\udd39 [Stripe Engineering Article](https://lnkd.in/g4JqgY39)  \n\ud83d\udd39 [Pinterest Engineering Article](https://lnkd.in/gnfrme2Z)  \n\ud83d\udd39 [SoundCloud Backstage Article](https://lnkd.in/gNDUUreD)  \n\ud83d\udd39 [OpenAI Engineering Article](https://lnkd.in/g3wFsZk7)  \n\ud83d\udd39 [Twitter Engineering Article](https://lnkd.in/gVVcSYNf)  \n\ud83d\udd39 [Instagram Engineering Article](https://lnkd.in/grE9bRCy)  \n\ud83d\udd39 [Airbnb Tech Article](https://lnkd.in/gy3RF5ih)  \n\ud83d\udd39 [Medium Engineering Article](https://lnkd.in/g3ASQbbB)  \n\ud83d\udd39 [Lyft Engineering Article](https://eng.lyft.com/)  \n\ud83d\udd39 [Heroku Engineering Article](https://blog.heroku.com/)  \n\ud83d\udd39 [Yelp Engineering Article](https://lnkd.in/gBWEyaHK)  \n\ud83d\udd39 [Stack Overflow Engineering Article](https://lnkd.in/gENW-7Wh)  \n\ud83d\udd39 [Etsy Engineering Article](https://lnkd.in/gS6UwNN9)  \n\ud83d\udd39 [Notion Tech Article](https://lnkd.in/gCUUi2UC)  \n\ud83d\udd39 [Gusto Engineering Article](https://lnkd.in/gyqBr_CW)  \n\ud83d\udd39 [Rippling Engineering Article](https://lnkd.in/ge6K-UkG)  \n\ud83d\udd39 [MongoDB Engineering Article](https://lnkd.in/grsAiuvS)  \n\ud83d\udd39 [PayPal Tech Article](https://lnkd.in/gxj9Mx64)  \n\ud83d\udd39 [Instacart Tech Article](https://lnkd.in/gdGN9SrY)  \n\ud83d\udd39 [Ramp Engineering Article](https://lnkd.in/gw_kd2Vj)  \n\ud83d\udd39 [Coursera Engineering Article](https://lnkd.in/gvga-NEg)  \n\ud83d\udd39 [Meta Engineering Article](https://lnkd.in/gc9xnZQ8)  \n\ud83d\udd39 [Grab Tech Article](https://lnkd.in/gfhcUM5y)  \n\ud83d\udd39 [Spotify Engineering Article](https://lnkd.in/gje__jGu)\n</code></pre>"},{"location":"interests/","title":"Personal Interests","text":"<p>Beyond software engineering, I have a diverse range of interests that shape who I am and influence my creative approach to problem-solving.</p>"},{"location":"interests/#my-interests-at-a-glance","title":"My Interests at a Glance","text":"\ud83d\udcda Reading\ud83c\udfb5 Music\ud83d\udcfa Anime\ud83c\udfb8 Guitar\ud83c\udfae Gaming\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 Parenting\ud83e\udde0 Wisdom &amp; Leadership <p>Reading keeps my mind sharp and provides new perspectives. I enjoy a variety of genres including:</p> <ul> <li>Technical books on software engineering</li> <li>Leadership and personal development</li> <li>Science fiction and fantasy</li> </ul> <p>Music is an essential part of my life, with tastes spanning across multiple genres:</p> <p>Anime provides both entertainment and surprising insights into storytelling and character development:</p> <pre><code>graph TD\n    A[My Anime Universe] --&gt; B[Dragon Ball Saga]\n    A --&gt; C[Battle Shonen]\n    A --&gt; D[Psychological &amp; Dark]\n\n    B --&gt; B1[Dragon Ball]\n    B --&gt; B2[Dragon Ball Z]\n    B --&gt; B3[Dragon Ball Super]\n    B --&gt; B4[Dragon Ball GT]\n    B --&gt; B5[Dragon Ball Daima]\n\n    C --&gt; C1[One Punch Man]\n    C --&gt; C2[Solo Leveling]\n    C --&gt; C3[Demon Slayer]\n    C --&gt; C4[One Piece]\n    C --&gt; C5[Attack on Titan]\n    C --&gt; C6[Kaiju No. 8]\n\n    C3 --&gt; C3a[Beautiful Animation]\n    C3 --&gt; C3b[Compelling Characters]\n\n    C4 --&gt; C4a[Epic Worldbuilding]\n    C4 --&gt; C4b[Character Growth]\n\n    C5 --&gt; C5a[Complex Narrative]\n    C5 --&gt; C5b[Dark Themes]\n\n    D --&gt; D1[Death Note]\n    D --&gt; D2[Monster]\n    D --&gt; D3[Berserk]\n\n    D1 --&gt; D1a[Cat and Mouse Thriller]\n    D1 --&gt; D1b[Moral Questions]\n\n    D2 --&gt; D2a[Psychological Depth]\n    D2 --&gt; D2b[Masterful Storytelling]\n\n    D3 --&gt; D3a[Dark Fantasy]\n    D3 --&gt; D3b[Incredible Art]\n\n    style A fill:#6d4c9c,stroke:#333,stroke-width:4px,color:#fff\n    style B fill:#3a7ca5,stroke:#333,stroke-width:2px,color:#fff\n    style C fill:#3a7ca5,stroke:#333,stroke-width:2px,color:#fff\n    style D fill:#3a7ca5,stroke:#333,stroke-width:2px,color:#fff</code></pre> <p>The variety of anime I enjoy reflects my interest in both action-packed entertainment and deeply complex narratives that challenge conventional thinking.</p> <p>While I'm an appreciator rather than a player, Spanish guitar music represents the perfect blend of technical skill and emotional expression. I admire artists who can tell stories through their instruments.</p> <p>As a gaming generalist, I appreciate many different genres and platforms. Games provide not just entertainment but often valuable lessons in:</p> <ul> <li>Strategic thinking</li> <li>Resource management</li> <li>Storytelling</li> <li>Problem-solving under pressure</li> </ul> <p>Father to two wonderful daughters, I'm constantly learning and growing in this most important role:</p> <ul> <li>Developing effective communication strategies</li> <li>Finding the balance between guidance and independence</li> <li>Creating meaningful family traditions</li> <li>Learning from other parents' experiences</li> </ul> <p>I'm passionate about developing as a leader and gaining wisdom through:</p> <ul> <li>Reading classic and modern philosophy</li> <li>Studying leadership principles from diverse sources</li> <li>Learning tactical approaches to complex problems</li> <li>Understanding human psychology and communication</li> <li>Applying military discipline and precision to civilian life</li> </ul> <p>These diverse interests inform my approach to software engineering, bringing unique perspectives and creative solutions to technical challenges.</p>"},{"location":"interests/#genres-i-enjoy","title":"Genres I Enjoy","text":"Genre What I Appreciate Rap &amp; Hip-Hop Lyrical complexity and storytelling Classical Structure and emotional depth Spanish Guitar Technical skill and cultural richness Mexican Music Cultural connection (Mariachi, Ranchera, Norte\u00f1a, Corridos) Electronic Innovation in Dubstep and Techno"},{"location":"repositories/","title":"GitHub Repository Index","text":"<pre><code># Sometimes your work is forgotten...\n# Sometimes we don't really remember why we did something...\n\necho \"I try to structure my projects in a way that I can always come back to them some day.\"\necho \"Even if I end up asking myself, \\\"Why did I do it that way?\\\"\"\n</code></pre>"},{"location":"repositories/#repository-collection","title":"Repository Collection","text":"Active ProjectsWeb DevelopmentBackend &amp; APIE-commerce3D &amp; CreativeJavaScript/TypeScriptPythonHTML/CSS/Web DesignOther LanguagesSQL &amp; Database <ol> <li>my-life-as-a-dev - Better docs example for everyone to leverage (Apache License 2.0)<ol> <li>You're in the docs for this one man.lol</li> </ol> </li> <li>dev-flow-mentor - Private TypeScript project<ol> <li>documentation</li> </ol> </li> <li>flowhive-creativity - FlowSpace - A \"vibe coding\" thought experiment (Private TypeScript)</li> <li>family-fun-schedule - Private TypeScript project</li> <li>solid-infrastructure-architect - Private TypeScript project</li> <li>dev-environment - Personal dev environment for easy setup/work from anywhere (Rust, Docker)</li> <li>dev-environment-workflows - Personal dev environment CICD workflows (Apache License 2.0)</li> <li>Vimrc-No-Plugins - Simple, no plugin, .vimrc file (MIT License)</li> </ol> <ol> <li>portfolio - Up-to-date portfolio using React (TypeScript, MobX, Next.js, SCSS, Framer Motion)</li> </ol> <ol> <li>golang-api - Creating an API using Golang, Fiber, and MongoDB (Private, MIT License)</li> <li>GoFundamentals - Reference repo for Golang fundamentals (MIT License)</li> <li>CSharpRefresher - Helpful resource for C# basics and advanced topics (MIT License)</li> </ol> <ol> <li>ecommerce-template - Open source e-commerce template</li> <li>Construction-Ecommerce-Frontend - E-commerce frontend for construction startup (JavaScript, Redux, Node.js, etc.)</li> <li>Construction-Ecommerce-Backend - C# backend for construction e-commerce (MIT License)</li> </ol> <ol> <li>3dTextThreeJss - Three.js tutorial implementation for 3D text</li> <li>ExperimentingWithThreeJs - Three.js experimentation (MIT License)</li> </ol> <ol> <li>Amazon-Clone - Amazon clone with Firebase and React</li> <li>Angular-Typescript-Tutorial-Part-I - Angular CLI with TypeScript tutorial</li> <li>Angular-Typescript-Tutorial-Part-II - Continuation of Angular tutorial</li> <li>FacebookMessenger-Clone - Facebook Messenger clone with Firebase authentication</li> <li>TravelAdvisor-Frontend - Travel advisor app based on JavaScript Mastery tutorial</li> <li>BookLibraryProject - React.js book library application</li> <li>DayTripGenerator - JavaScript random day trip generator</li> <li>Chat-App-MicrosoftTeamsClone - Microsoft Teams-like chatroom experience</li> <li>FlashcardProject-Frontend - React flashcard app with hooks and Axios</li> <li>ReactWorkSheetExercises - React parent/child component interaction examples</li> </ol> <ol> <li>RockPaperScissorsLizardSpock_Python - Python game against bot or human opponent</li> <li>CreatingAMockCrypto - Simple blockchain implementation</li> <li>SuperheroesCreatorProject - Django-based superhero database</li> <li>TrashCollectorProject - Django CRUD app for trash collection</li> <li>SweepstakesGenerator - Python project focusing on UI design patterns</li> <li>RobotsVsDinosaurs - Python OOP game development</li> <li>MusicLibraryProject-Backend - Django REST Framework music library</li> <li>FlashcardProject-Backend - Django REST API flashcard backend</li> <li>YouTubeCloneProject_Backend - YouTube API integration backend</li> <li>DebuggingProject - Python debugging exercise (MIT License)</li> </ol> <ol> <li>Portfolio-Site - Professional portfolio with React and Next.js</li> <li>Personal-Site-HTML5 - Basic HTML website</li> <li>PortfolioWebsite - Portfolio with Bootstrap 5</li> <li>TinDogProject - HTML5/CSS3/Bootstrap 5 modular website</li> <li>PersonalSite-NoBootsrap - W3.CSS based personal site</li> <li>DOM-DocumentObjectModel - DOM practice</li> </ol> <ol> <li>JavaRefresh - Private Java practice repository</li> <li>RockPaperScissorsLizardSpock_C-Sharp - C# version of RPSLS game</li> <li>hw4 - Private Java project</li> <li>hw5 - Private Molecule Collection (HTML)</li> <li>angular-example-code - Private TypeScript Angular example</li> <li>Box_Physics - Private C# project</li> </ol> <ol> <li>SQLZoo-Practice - SQL practice notebook</li> </ol>"},{"location":"repositories/dev_flow_mentor/","title":"Welcome to your Lovable project","text":""},{"location":"repositories/dev_flow_mentor/#project-info","title":"Project info","text":"<p>URL: https://lovable.dev/projects/3d12c8fb-ad6a-4080-ba7d-f72ab72178d8</p>"},{"location":"repositories/dev_flow_mentor/#how-can-i-edit-this-code","title":"How can I edit this code?","text":"<p>There are several ways of editing your application.</p> <p>Use Lovable</p> <p>Simply visit the Lovable Project and start prompting.</p> <p>Changes made via Lovable will be committed automatically to this repo.</p> <p>Use your preferred IDE</p> <p>If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.</p> <p>The only requirement is having Node.js &amp; npm installed - install with nvm</p> <p>Follow these steps:</p> <pre><code># Step 1: Clone the repository using the project's Git URL.\ngit clone &lt;YOUR_GIT_URL&gt;\n\n# Step 2: Navigate to the project directory.\ncd &lt;YOUR_PROJECT_NAME&gt;\n\n# Step 3: Install the necessary dependencies.\nnpm i\n\n# Step 4: Start the development server with auto-reloading and an instant preview.\nnpm run dev\n</code></pre> <p>Edit a file directly in GitHub</p> <ul> <li>Navigate to the desired file(s).</li> <li>Click the \"Edit\" button (pencil icon) at the top right of the file view.</li> <li>Make your changes and commit the changes.</li> </ul> <p>Use GitHub Codespaces</p> <ul> <li>Navigate to the main page of your repository.</li> <li>Click on the \"Code\" button (green button) near the top right.</li> <li>Select the \"Codespaces\" tab.</li> <li>Click on \"New codespace\" to launch a new Codespace environment.</li> <li>Edit files directly within the Codespace and commit and push your changes once you're done.</li> </ul>"},{"location":"repositories/dev_flow_mentor/#what-technologies-are-used-for-this-project","title":"What technologies are used for this project?","text":"<p>This project is built with:</p> <ul> <li>Vite</li> <li>TypeScript</li> <li>React</li> <li>shadcn-ui</li> <li>Tailwind CSS</li> </ul>"},{"location":"repositories/dev_flow_mentor/#how-can-i-deploy-this-project","title":"How can I deploy this project?","text":"<p>Simply open Lovable and click on Share -&gt; Publish.</p>"},{"location":"repositories/dev_flow_mentor/#can-i-connect-a-custom-domain-to-my-lovable-project","title":"Can I connect a custom domain to my Lovable project?","text":"<p>Yes, you can!</p> <p>To connect a domain, navigate to Project &gt; Settings &gt; Domains and click Connect Domain.</p> <p>Read more here: Setting up a custom domain</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This page contains solutions to common issues you might encounter when working with this project.</p>"},{"location":"troubleshooting/#documentation-cli-tool-issues","title":"Documentation CLI Tool Issues","text":"Git History Conflicts with gh-pages BranchOpenAI API Key WarningMkDocs Build IssuesIncorrect Plugin ImportGitHub Actions IssuesWebsite Display Issues <p>Issue: When running the CLI tool to deploy documentation, you receive errors like:</p> <pre><code>error: gh-pages is unrelated to origin/gh-pages\nIf you're sure this is intended, retry with --ignore-remote-status\n</code></pre> <p>Cause: This occurs when the local gh-pages branch created by the deployment script has a different history than the remote gh-pages branch on GitHub. Git refuses to push because these branches have unrelated commit histories.</p> <p>Solution: </p> <ol> <li>Delete the remote gh-pages branch:</li> </ol> <pre><code>git push origin --delete gh-pages\n</code></pre> <ol> <li>Run the documentation deployment tool again:</li> </ol> <pre><code>./doc-cli.sh\n</code></pre> <p>Then select the deployment option. Alternatively, run the command directly:</p> <pre><code>./scripts/target/release/doc-cli deploy\n</code></pre> <ol> <li>This will create a fresh gh-pages branch locally and push it to GitHub without history conflicts.</li> </ol> <p>Prevention:  - Avoid manually modifying the gh-pages branch - Always use the CLI tool for deployments - If you need to force deployment, consider deleting the remote gh-pages branch first</p> <p>Issue: When building or serving the documentation, you see this warning:</p> <pre><code>WARNING:mkdocs.plugins.ai_plugin:AI Plugin: No API key found. Set OPENAI_API_KEY environment variable.\n</code></pre> <p>Cause: The AI plugin is looking for an OpenAI API key but cannot find it in the environment variables.</p> <p>Solution: - This is just a warning and won't prevent building or serving the documentation - If you want to use the AI features, set the OPENAI_API_KEY environment variable as described in the README</p> <p>Issue: MkDocs reports that it cannot find a custom plugin.</p> <p>Solution: Verify that the plugin is properly installed: <pre><code>python -c \"import sys; import mkdocs_plugins; print(f'Plugin module found at: {mkdocs_plugins.__file__}')\"\n</code></pre></p> <p>If this command fails, reinstall the package: <pre><code>pip uninstall -y mkdocs-ai-plugin\npip install -e .\n</code></pre></p>"},{"location":"troubleshooting/#missing-plugin-dependencies","title":"Missing Plugin Dependencies","text":"<p>Issue: MkDocs fails to build with an error about missing plugins.</p> <p>Solution: 1. Make sure you've installed the project in development mode: <pre><code>pip install -e .\n</code></pre></p> <ol> <li> <p>Verify that all dependencies are installed: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Ensure the PYTHONPATH includes the current directory: <pre><code>export PYTHONPATH=$PYTHONPATH:$(pwd)\n# On Windows PowerShell:\n# $env:PYTHONPATH=\"$env:PYTHONPATH;$(pwd)\"\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#github-pages-deployment-failing","title":"GitHub Pages Deployment Failing","text":"<p>Issue: The GitHub Actions workflow for deploying to GitHub Pages is failing.</p> <p>Solution: 1. Check the workflow logs in the GitHub Actions tab 2. Ensure that the GitHub Pages source is set to \"GitHub Actions\" in the repository settings 3. Verify that the gh-pages branch exists and has the correct permissions 4. If the issue persists, try the manual deployment process described in the first section</p>"},{"location":"troubleshooting/#mike-alias-conflict-during-deployment","title":"Mike Alias Conflict during Deployment","text":"<p>Issue: The GitHub Actions workflow fails during the \"Build and deploy with Mike\" step with an error similar to: <pre><code>error: alias 'latest' already exists for version 'vX.Y.Z'\nError: Process completed with exit code 1.\n</code></pre></p> <p>Cause: This error occurs when <code>mike deploy</code> attempts to assign an alias (commonly <code>latest</code>) to a new version, but this alias is already associated with a different, existing version. By default, <code>mike</code> does not overwrite existing aliases to prevent accidental changes.</p> <p>Solution: To resolve this, modify the <code>mike deploy</code> command within your GitHub Actions workflow file (typically located at <code>.github/workflows/github_pages.yml</code>). Add the <code>--update-aliases</code> flag to the command. This flag explicitly permits <code>mike</code> to update an existing alias to point to the new version being deployed.</p> <p>For example, change: <pre><code>mike deploy --push $LATEST_TAG latest\n</code></pre> to: <pre><code>mike deploy --push --update-aliases $LATEST_TAG latest\n</code></pre> This ensures that the specified alias (e.g., <code>latest</code>) is always updated to reflect the most recently deployed version tag. You can see this in context in the <code>Build and deploy with Mike</code> step:</p> <pre><code># ...\n      # Check if alias 'latest' already exists for this version\n      if mike list | grep -q \"$LATEST_TAG.*latest\"; then\n        echo \"Alias 'latest' already exists for version $LATEST_TAG, skipping deploy\"\n      else\n        # Deploy the latest version with Mike, updating the alias if it exists\n        mike deploy --push --update-aliases $LATEST_TAG latest\n      fi\n# ...\n</code></pre>"},{"location":"troubleshooting/#missing-css-or-javascript","title":"Missing CSS or JavaScript","text":"<p>Issue: The documentation site is missing styles or functionality.</p> <p>Solution: 1. Clear your browser cache 2. Check that all files in the <code>assets</code> directory are properly being included in the build 3. Verify that the import maps and custom components are correctly set up 4. For interactive elements like dreamscape scenes, check the browser console for JavaScript errors</p>"},{"location":"troubleshooting/add_a_test_scene/","title":"Adding a New Test Scene","text":"<p>Disclaimer: This guide assumes you already have a self-contained HTML file or component that you want to convert to follow the MkDocs pattern used in this project. If you need an example of what a convertible HTML file looks like, check out the HTML to MkDocs Pattern Conversion Example in the troubleshooting section.</p>"},{"location":"troubleshooting/add_a_test_scene/#fast-conversion-with-github-copilot","title":"Fast Conversion with GitHub Copilot","text":"<p>For a more automated approach to converting self-contained HTML files to our component architecture, you can leverage GitHub Copilot in Agent mode with our context profile:</p> <pre><code># In your VS Code or GitHub Copilot Chat interface\n@githubcopilot Use the context profile in ai_food/add_a_test_scene_profile.json to help me convert my self-contained HTML scene to follow the project's component architecture.\n</code></pre> <p>The context profile defines our project structure and templating patterns, making it easier to:</p> <ol> <li>Extract components from self-contained HTML</li> <li>Generate proper file structure</li> <li>Create component JavaScript files with shadow DOM</li> <li>Add CSS files in the correct location</li> <li>Update mkdocs.yml configuration</li> </ol> <p>Using this approach can significantly speed up the conversion process while ensuring consistency with our project's architecture.</p>"},{"location":"troubleshooting/add_a_test_scene/#manual-conversion-process","title":"Manual Conversion Process","text":"<p>If you prefer to convert components manually, follow these steps:</p>"},{"location":"troubleshooting/add_a_test_scene/#overview-of-steps","title":"Overview of Steps","text":"<ol> <li>Create the Markdown file for your scene</li> <li>Create the component JavaScript file</li> <li>Create the component CSS file</li> <li>Update the mkdocs.yml configuration</li> </ol>"},{"location":"troubleshooting/add_a_test_scene/#step-1-create-the-markdown-file","title":"Step 1: Create the Markdown File","text":"<p>Create a new markdown file under <code>docs/blog/life/test_scenes/</code> with a name of your choice (e.g., <code>delta.md</code>).</p> <pre><code># Your Scene Title\n\n----\n\n&lt;!-- Simply use the custom element directly as intended by the component --&gt;\n&lt;your-component-name class=\"test-scene-container\"&gt;&lt;/your-component-name&gt;\n\n&lt;script type=\"importmap\"&gt;\n{\n  \"imports\": {\n    \"three\": \"https://cdn.jsdelivr.net/npm/three@0.176.0/build/three.module.js\",\n    \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.176.0/examples/jsm/\",\n    \"your-component-name\": \"/assets/js/components/your-component-name/your-component-name.js\"\n  }\n}\n&lt;/script&gt;\n\n&lt;script type=\"module\"&gt;\n  // Make sure the script has loaded\n  console.log('Loading Your Scene Component...');\n\n  // Debug flag to help troubleshooting\n  window.DEBUG_YOUR_COMPONENT = true;\n&lt;/script&gt;\n</code></pre> <p>Note: Each markdown file includes its own importmap with the necessary imports. This scoped approach means you don't need to modify the global importmap.js file when adding a new scene.</p>"},{"location":"troubleshooting/add_a_test_scene/#step-2-create-the-component-javascript-file","title":"Step 2: Create the Component JavaScript File","text":"<p>Create the component JavaScript file at <code>docs/assets/js/components/your-component-name/your-component-name.js</code>:</p> <pre><code>// Your Scene Component\nclass YourComponentClass extends HTMLElement {\n  connectedCallback() {\n    // Initialize your component\n    this.innerHTML = `\n      &lt;!-- Your HTML structure here --&gt;\n      &lt;div class=\"your-component-container\"&gt;&lt;/div&gt;\n    `;\n\n    // Component setup logic\n    this.initializeComponent();\n  }\n\n  initializeComponent() {\n    // Initialize your scene, add event listeners, etc.\n    console.log('Component initialized');\n\n    // Set up animation loop if needed\n    this.animate();\n  }\n\n  animate() {\n    // Animation loop if needed\n    requestAnimationFrame(() =&gt; this.animate());\n\n    // Update your component's visuals\n  }\n}\n\n// Register the custom element\ncustomElements.define('your-component-name', YourComponentClass);\n\n// Export the component\nexport default YourComponentClass;\n</code></pre>"},{"location":"troubleshooting/add_a_test_scene/#step-3-create-the-component-css-file","title":"Step 3: Create the Component CSS File","text":"<p>Create the component CSS file at <code>docs/assets/css/components/your-component-name.css</code>:</p> <pre><code>/* Styles for Your Scene Component */\n/* Import shared test scene styles */\n@import url('./test-scene-shared.css');\n\n/* Component-specific styling */\nyour-component-name {\n  display: block;\n  width: 100%;\n  height: 100%;\n  position: relative;\n}\n\n/* Additional component-specific styles */\n.your-component-container {\n  width: 100%;\n  height: 100%;\n  background: #121212;\n}\n</code></pre>"},{"location":"troubleshooting/add_a_test_scene/#step-4-update-the-mkdocsyml-configuration","title":"Step 4: Update the mkdocs.yml Configuration","text":"<p>Update the <code>mkdocs.yml</code> file to include your component's CSS and JavaScript files:</p> <pre><code># Under the extra_css section\nextra_css:\n  - assets/css/custom.css\n  - assets/css/components/test-scene-shared.css\n  - assets/css/components/dreamscape.css\n  - assets/css/components/dreamscape-proto4.css\n  - assets/css/components/dreamscape-proto6.css\n  - assets/css/components/your-component-name.css  # Add your CSS here\n\n# Under the extra_javascript section\nextra_javascript:\n  - https://cdnjs.cloudflare.com/ajax/libs/es-module-shims/1.7.3/es-module-shims.min.js\n  - { \"path\": \"assets/js/importmap.js\", \"defer\": true }\n  - { \"path\": \"assets/js/custom/particleBackground.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/custom/initParticles.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/custom/versionSelector.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/components/dreamscape/dreamscape.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/components/dreamscape-proto4/dreamscape-proto4.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/components/dreamscape-proto6/dreamscape-proto6.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/components/your-component-name/your-component-name.js\", \"type\": \"module\" }  # Add your JS here\n</code></pre>"},{"location":"troubleshooting/add_a_test_scene/#real-world-example","title":"Real-World Example","text":"<p>Here's a simplified example of the changes made for the \"Interactive Canvas Dreamscape\" scene:</p>"},{"location":"troubleshooting/add_a_test_scene/#1-the-markdown-file-charliemd","title":"1. The Markdown File (charlie.md)","text":"<pre><code># Interactive Canvas Dreamscape\n\n----\n\n&lt;!-- Simply use the custom element directly as intended by the component --&gt;\n&lt;dreamscape-proto6 class=\"test-scene-container\"&gt;&lt;/dreamscape-proto6&gt;\n\n&lt;script type=\"importmap\"&gt;\n{\n  \"imports\": {\n    \"three\": \"https://cdn.jsdelivr.net/npm/three@0.176.0/build/three.module.js\",\n    \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.176.0/examples/jsm/\",\n    \"dreamscape-proto6\": \"/assets/js/components/dreamscape-proto6/dreamscape-proto6.js\"\n  }\n}\n&lt;/script&gt;\n\n&lt;script type=\"module\"&gt;\n  // Make sure the script has loaded\n  console.log('Loading Interactive Canvas Dreamscape component...');\n\n  // Debug flag to help troubleshooting\n  window.DEBUG_DREAMSCAPE_PROTO6 = true;\n&lt;/script&gt;\n</code></pre>"},{"location":"troubleshooting/add_a_test_scene/#2-the-component-javascript-file","title":"2. The Component JavaScript File","text":"<pre><code>// Interactive Canvas Dreamscape Component\nclass DreamscapeProto6 extends HTMLElement {\n  connectedCallback(){\n    this.innerHTML = `\n      &lt;canvas id=\"canvas\" aria-label=\"Interactive Dreamscape Canvas\"&gt;&lt;/canvas&gt;\n      &lt;div id=\"fps\"&gt;FPS: --&lt;/div&gt;\n    `;\n    // Component implementation details\n    // ...\n  }\n}\n\n// Register the custom element\ncustomElements.define('dreamscape-proto6', DreamscapeProto6);\n\n// Export the component\nexport default DreamscapeProto6;\n</code></pre>"},{"location":"troubleshooting/add_a_test_scene/#3-the-component-css-file","title":"3. The Component CSS File","text":"<pre><code>/* Styles for the Interactive Canvas Dreamscape */\n/* Import shared test scene styles */\n@import url('./test-scene-shared.css');\n\ndreamscape-proto6 {\n  display: block;\n  width: 100%;\n  height: 100vh;\n  position: relative;\n}\n\ndreamscape-proto6 canvas {\n  width: 100%;\n  height: 100%;\n  display: block;\n  background: #121212;\n}\n\ndreamscape-proto6 #fps {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 5px 10px;\n  border-radius: 4px;\n  font-family: monospace;\n}\n</code></pre> <p>By following this pattern, you can easily add new test scenes to your project in a consistent manner.</p>"},{"location":"troubleshooting/html_to_mkdocs_pattern_example/","title":"HTML to MkDocs Pattern Conversion Example","text":"<p>This document provides an example of a standalone HTML file that can be converted to follow the MkDocs pattern used in this project. The example below shows:</p> <ol> <li>The original standalone HTML file</li> <li>How it was converted to the MkDocs pattern</li> </ol> Original Standalone HTML File <p>Here's an example of a standalone HTML file that contains an interactive canvas visualization (this was the original implementation of the charlie scene):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;Rick's Interactive Canvas Dreamscape&lt;/title&gt;\n&lt;style&gt;\n    body { \n    margin: 0; \n    overflow: hidden; \n    background: #000; \n    touch-action: none;\n    font-family: sans-serif;\n    }\n    canvas {\n    display: block; \n    width: 100vw; \n    height: 100vh;\n    }\n    #fps {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    color: white;\n    background: rgba(0,0,0,0.5);\n    padding: 5px 10px;\n    border-radius: 4px;\n    font-family: monospace;\n    }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;canvas id=\"canvas\" aria-label=\"Interactive Dreamscape Canvas\"&gt;&lt;/canvas&gt;\n&lt;div id=\"fps\"&gt;FPS: --&lt;/div&gt;\n\n&lt;script&gt;\n    const canvas = document.getElementById('canvas'),\n        ctx    = canvas.getContext('2d'),\n        fpsEl  = document.getElementById('fps');\n    const logs = [], log = e =&gt; logs.push({t:Date.now(),type:e.type});\n\n    function resize(){\n    canvas.width  = window.innerWidth;\n    canvas.height = window.innerHeight;\n    }\n    window.addEventListener('resize', resize);\n    resize();\n\n    let width = canvas.width, height = canvas.height;\n    let lastTap=0, tapCount=0, magnet=false, swigTimer=0;\n    let ox=0, oy=0, rotation=0, initDist=0, initRot=0;\n    const ribbons = [], bursts = [], currentRibbon = [];\n    const orb = { x: width/2, y: height/2 };\n\n    window.addEventListener('touchend', e=&gt;{\n    log(e);\n    const now = Date.now();\n    tapCount = (now - lastTap &lt; 300) ? tapCount+1 : 1;\n    lastTap = now;\n    const t = e.changedTouches[0];\n    if (tapCount===2) magnet = !magnet;\n    if (tapCount===3) swigTimer = 60;\n    if (tapCount===1) spawnBurst(t.clientX, t.clientY);\n    });\n\n    window.addEventListener('devicemotion', e=&gt;{\n    log(e);\n    const a = e.accelerationIncludingGravity || e.acceleration;\n    if (a){\n        const m = Math.hypot(a.x, a.y, a.z);\n        if (m&gt;20) for(let i=0;i&lt;10;i++) spawnBurst(Math.random()*width, Math.random()*height);\n    }\n    });\n\n    window.addEventListener('touchmove', e=&gt;{\n    log(e);\n    if (e.touches.length===1){\n        const t = e.touches[0];\n        currentRibbon.push({ x:t.clientX, y:t.clientY });\n        if (magnet) { orb.x = t.clientX; orb.y = t.clientY; }\n    }\n    });\n\n    window.addEventListener('touchstart', e=&gt;{\n    if (e.touches.length===2){\n        const dx = e.touches[0].clientX - e.touches[1].clientX,\n            dy = e.touches[0].clientY - e.touches[1].clientY;\n        initDist = Math.hypot(dx, dy);\n        initRot  = rotation;\n    }\n    });\n\n    window.addEventListener('touchmove', e=&gt;{\n    if (e.touches.length===2){\n        const dx = e.touches[0].clientX - e.touches[1].clientX,\n            dy = e.touches[0].clientY - e.touches[1].clientY;\n        const d = Math.hypot(dx, dy);\n        rotation = initRot + (d - initDist)/200;\n    }\n    });\n\n    window.addEventListener('deviceorientation', e=&gt;{\n    ox = (e.gamma||0)/45;\n    oy = (e.beta||0)/90;\n    log(e);\n    });\n\n    function spawnBurst(x,y){\n    const parts = [];\n    for(let i=0;i&lt;20;i++){\n        const ang = 2*Math.PI*(i/20);\n        parts.push({ ang, r:0 });\n    }\n    bursts.push({ x, y, parts });\n    }\n\n    let last = performance.now(), frame = 0;\n    function update(now){\n    const dt = now - last; last = now; frame++;\n    if (frame % 60 === 0) fpsEl.textContent = 'FPS: ' + Math.round(1000/dt);\n\n    ctx.clearRect(0,0,width,height);\n\n    ctx.save();\n        ctx.translate(ox*20, oy*20);\n        ctx.strokeStyle = '#222';\n        for(let i=0;i&lt;width;i+=50){\n        ctx.beginPath(); ctx.moveTo(i,0); ctx.lineTo(i,height); ctx.stroke();\n        }\n        for(let j=0;j&lt;height;j+=50){\n        ctx.beginPath(); ctx.moveTo(0,j); ctx.lineTo(width,j); ctx.stroke();\n        }\n    ctx.restore();\n\n    ctx.save();\n        ctx.translate(width/2, height/2);\n        ctx.rotate(rotation);\n        ctx.translate(-width/2, -height/2);\n\n        ribbons.forEach(rib=&gt;{\n        ctx.beginPath();\n        rib.forEach(pt=&gt;ctx.lineTo(pt.x, pt.y));\n        ctx.strokeStyle='rgba(0,255,255,0.5)'; ctx.lineWidth=5; ctx.stroke();\n        });\n        if (currentRibbon.length){\n        ctx.beginPath();\n        currentRibbon.forEach(pt=&gt;ctx.lineTo(pt.x, pt.y));\n        ctx.stroke();\n        }\n\n        bursts.forEach((b,i)=&gt;{\n        b.parts.forEach(p=&gt;p.r+=2);\n        ctx.fillStyle='cyan';\n        b.parts.forEach(p=&gt;{\n            const x=b.x+Math.cos(p.ang)*p.r,\n                y=b.y+Math.sin(p.ang)*p.r;\n            ctx.beginPath(); ctx.arc(x,y,3,0,2*Math.PI); ctx.fill();\n        });\n        if (b.parts[0].r&gt;100) bursts.splice(i,1);\n        });\n\n        ctx.fillStyle = magnet ? 'yellow' : 'magenta';\n        ctx.beginPath(); ctx.arc(orb.x, orb.y, 20,0,2*Math.PI); ctx.fill();\n\n        if (swigTimer--&gt;0){\n        ctx.font='24px monospace'; ctx.fillStyle='#fff';\n        ctx.fillText('Swiggity!', orb.x+30, orb.y-30);\n        }\n    ctx.restore();\n\n    requestAnimationFrame(update);\n    }\n    update(last);\n\n    window.addEventListener('beforeunload', ()=&gt;\n    navigator.sendBeacon('/log', JSON.stringify(logs))\n    );\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"troubleshooting/html_to_mkdocs_pattern_example/#conversion-to-mkdocs-pattern","title":"Conversion to MkDocs Pattern","text":"<p>Here's how the standalone HTML file was converted to follow the MkDocs pattern:</p> 1. Create the Markdown File (charlie.md)2. Extract the JavaScript into a Web Component (dreamscape-proto6.js)3. Extract the CSS into a Component CSS File (dreamscape-proto6.css)4. Update the mkdocs.yml ConfigurationKey Steps in the Conversion Process <pre><code># Interactive Canvas Dreamscape\n\n----\n\n&lt;!-- Simply use the custom element directly as intended by the component --&gt;\n&lt;dreamscape-proto6 class=\"test-scene-container\"&gt;&lt;/dreamscape-proto6&gt;\n\n&lt;script type=\"importmap\"&gt;\n{\n\"imports\": {\n    \"three\": \"https://cdn.jsdelivr.net/npm/three@0.176.0/build/three.module.js\",\n    \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.176.0/examples/jsm/\",\n    \"dreamscape-proto6\": \"/assets/js/components/dreamscape-proto6/dreamscape-proto6.js\"\n}\n}\n&lt;/script&gt;\n\n&lt;script type=\"module\"&gt;\n// Make sure the script has loaded\nconsole.log('Loading Interactive Canvas Dreamscape component...');\n\n// Debug flag to help troubleshooting\nwindow.DEBUG_DREAMSCAPE_PROTO6 = true;\n&lt;/script&gt;\n</code></pre> <p>Note: Each markdown file includes its own importmap with the necessary imports. This scoped approach means you don't need to modify the global importmap.js file when adding a new scene.</p> <pre><code>// Interactive Canvas Dreamscape Component\nclass DreamscapeProto6 extends HTMLElement {\nconnectedCallback(){\n    this.innerHTML = `\n    &lt;canvas id=\"canvas\" aria-label=\"Interactive Dreamscape Canvas\"&gt;&lt;/canvas&gt;\n    &lt;div id=\"fps\"&gt;FPS: --&lt;/div&gt;\n    `;\n    const canvas = this.querySelector('#canvas'),\n        ctx    = canvas.getContext('2d'),\n        fpsEl  = this.querySelector('#fps');\n    const logs = [], log = e =&gt; logs.push({t:Date.now(),type:e.type});\n\n    function resize(){\n    canvas.width  = window.innerWidth;\n    canvas.height = window.innerHeight;\n    }\n    window.addEventListener('resize', resize);\n    resize();\n\n    // The rest of the JavaScript code from the original HTML file goes here...\n    // Everything enclosed within the connectedCallback method\n}\n}\n\n// Register the custom element\ncustomElements.define('dreamscape-proto6', DreamscapeProto6);\n\n// Export the component\nexport default DreamscapeProto6;\n</code></pre> <pre><code>/* Styles for the Interactive Canvas Dreamscape */\n/* Import shared test scene styles */\n@import url('./test-scene-shared.css');\n\ndreamscape-proto6 {\ndisplay: block;\nwidth: 100%;\nheight: 100vh;\nposition: relative;\n}\n\ndreamscape-proto6 canvas {\nwidth: 100%;\nheight: 100%;\ndisplay: block;\nbackground: #121212;\n}\n\ndreamscape-proto6 #fps {\nposition: absolute;\ntop: 10px;\nright: 10px;\nbackground: rgba(0, 0, 0, 0.5);\ncolor: white;\npadding: 5px 10px;\nborder-radius: 4px;\nfont-family: monospace;\n}\n</code></pre> <pre><code># Under the extra_css section\nextra_css:\n  - assets/css/custom.css\n  - assets/css/components/test-scene-shared.css\n  - assets/css/components/dreamscape.css\n  - assets/css/components/dreamscape-proto4.css\n  - assets/css/components/dreamscape-proto6.css  # Add your CSS here\n\n# Under the extra_javascript section\nextra_javascript:\n  - https://cdnjs.cloudflare.com/ajax/libs/es-module-shims/1.7.3/es-module-shims.min.js\n  - { \"path\": \"assets/js/importmap.js\", \"defer\": true }\n  - { \"path\": \"assets/js/custom/particleBackground.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/custom/initParticles.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/custom/versionSelector.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/components/dreamscape/dreamscape.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/components/dreamscape-proto4/dreamscape-proto4.js\", \"type\": \"module\" }\n  - { \"path\": \"assets/js/components/dreamscape-proto6/dreamscape-proto6.js\", \"type\": \"module\" }  # Add your JS here\n</code></pre> <ol> <li>Remove the HTML wrapper:</li> <li>Remove <code>&lt;!DOCTYPE&gt;</code>, <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> tags</li> <li> <p>Keep only the content that would be inside the body</p> </li> <li> <p>Create a Web Component:</p> </li> <li>Rename the page title to remove references to individuals</li> <li>Create a custom element class that extends HTMLElement</li> <li>Move the HTML structure into the <code>connectedCallback</code> method using template literals</li> <li>Move all JavaScript into the class as methods or within connectedCallback</li> <li> <p>Register the custom element with <code>customElements.define()</code></p> </li> <li> <p>Extract CSS:</p> </li> <li>Move styles to a separate CSS file</li> <li>Import shared test scene styles</li> <li> <p>Scope all styles to the custom element name</p> </li> <li> <p>Update Configuration:</p> </li> <li>Add the CSS and JS files to mkdocs.yml configuration</li> </ol> <p>Tip</p> <p>By following these steps, you can convert any standalone HTML visualization or demo into a reusable component that fits into the MkDocs pattern of this project. Each scene is self-contained with its own import map, which simplifies the process of adding new components.</p>"}]}