/**
 * Simple Typewriter JS implementation
 */
(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory();
  } else {
    root.Typewriter = factory();
  }
}(typeof self !== 'undefined' ? self : this, function() {
  function Typewriter(element, options) {
    this.element = typeof element === 'string' ? document.querySelector(element) : element;
    this.options = Object.assign({
      strings: [''],
      autoStart: true,
      loop: true,
      delay: 75,
      deleteSpeed: 50,
      cursor: '|',
      cursorClassName: 'Typewriter__cursor'
    }, options || {});
    
    this.isDeleting = false;
    this.loopNum = 0;
    this.currentText = '';
    this.currentCharIndex = 0;
    this.strings = this.options.strings;
    this.cursorElement = null;
    
    if (this.options.autoStart) {
      this.init();
    }
  }
  
  Typewriter.prototype.init = function() {
    if (!this.element) return;
    
    // Clear the element
    this.element.innerHTML = '';
    
    // Add cursor element
    this.cursorElement = document.createElement('span');
    this.cursorElement.className = this.options.cursorClassName;
    this.cursorElement.textContent = this.options.cursor;
    this.element.after(this.cursorElement);
    
    this.type();
  };
  
  Typewriter.prototype.type = function() {
    const self = this;
    const fullText = this.strings[this.loopNum % this.strings.length];
    
    if (this.isDeleting) {
      this.currentText = fullText.substring(0, --this.currentCharIndex);
    } else {
      this.currentText = fullText.substring(0, ++this.currentCharIndex);
    }
    
    this.element.textContent = this.currentText;
    
    let typeSpeed = this.options.delay;
    
    if (this.isDeleting) {
      typeSpeed = this.options.deleteSpeed;
    }
    
    if (!this.isDeleting && this.currentCharIndex === fullText.length) {
      // Pause at end of text
      typeSpeed = 1500;
      this.isDeleting = true;
    } else if (this.isDeleting && this.currentCharIndex === 0) {
      this.isDeleting = false;
      this.loopNum++;
      
      if (!this.options.loop && this.loopNum >= this.strings.length) {
        return;
      }
      
      // Pause before starting new word
      typeSpeed = 500;
    }
    
    setTimeout(function() {
      self.type();
    }, typeSpeed);
  };
  
  return Typewriter;
}));
